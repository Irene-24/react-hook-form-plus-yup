import Head from "next/head";
import { yupResolver } from "@hookform/resolvers/yup";

import { useForm } from "react-hook-form";

import { userInit, userSchema } from "../schemas/intro";

export default function Home() {
  const {
    handleSubmit,
    register,
    formState: { errors },
  } = useForm({
    resolver: yupResolver(userSchema),
    defaultValues: userInit,
  });

  const onSubmit = (values) => {
    console.log(values);
  };

  return (
    <div>
      <Head>
        <title>React Hook Form and Yup</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex items-center justify-center w-full min-h-screen ">
        <form
          onSubmit={handleSubmit(onSubmit)}
          className="w-[95vw] max-w-sm rounded-md p-4 shadow bg-green-200"
        >
          <h4 className="my-2 text-lg font-semibold text-center">User Form</h4>
          <hr className="mb-6 border-slate-500" />

          {/* NAME FIELD */}

          <div className="relative mb-6">
            <label htmlFor="name" className="block text-base font-medium">
              Name
            </label>
            <input
              type="text"
              id="name"
              className="w-full p-1 my-1 text-base text-gray-900 border border-gray-300 rounded-sm "
              {...register("name")}
            />
            <small className="italic text-red-400">
              {errors?.name?.message}
            </small>
          </div>

          {/* EMAIL FIELD */}

          <div className="relative mb-6">
            <label htmlFor="email" className="block text-base font-medium">
              Email
            </label>
            <input
              type="email"
              id="email"
              className="w-full p-1 my-1 text-base text-gray-900 border border-gray-300 rounded-sm "
              {...register("email")}
            />
            <small className="italic text-red-400">
              {errors?.email?.message}
            </small>
          </div>

          {/* AGE FIELD */}

          <div className="relative mb-6">
            <label htmlFor="age" className="block text-base font-medium">
              Age
            </label>
            <input
              type="number"
              id="age"
              className="w-full p-1 my-1 text-base text-gray-900 border border-gray-300 rounded-sm "
              {...register("age")}
            />
            <small className="italic text-red-400">
              {errors?.age?.message}
            </small>
          </div>

          {/* LOCATION FIELD */}

          <div className="relative mb-6">
            <label htmlFor="location" className="block text-base font-medium">
              Location
            </label>
            <select
              id="location"
              className="w-full p-1 my-1 text-base text-gray-900 border border-gray-300 rounded-sm "
              {...register("location")}
            >
              <option value="">Select...</option>
              <option value="Abuja">Abuja</option>
              <option value="Anambra">Anambra</option>
              <option value="Bauchi">Bauchi</option>
              <option value="Calabar">Calabar</option>
              <option value="Lagos">Lagos</option>
            </select>

            <small className="italic text-red-400">
              {errors?.location?.message}
            </small>
          </div>

          {/* MODE FIELD */}

          <div className="relative mb-6">
            <label className="block text-base font-medium">
              Preferred work mode
            </label>

            <div className="flex flex-wrap items-center justify-between">
              <label className="grid gap-1 grid-cols-[40px_minmax(0,1fr)]">
                <input value="remote" type="radio" {...register("mode")} />

                <span>Remote</span>
              </label>

              <label className="grid gap-1 grid-cols-[40px_minmax(0,1fr)]">
                <input value="hybrid" type="radio" {...register("mode")} />

                <span>Hybrid</span>
              </label>

              <label className="grid gap-1 grid-cols-[40px_minmax(0,1fr)]">
                <input value="on-site" type="radio" {...register("mode")} />

                <span>On-site</span>
              </label>
            </div>

            <small className="italic text-red-400">
              {errors?.mode?.message}
            </small>
          </div>

          <div className="flex justify-center m-2">
            <button
              type="submit"
              className="p-2 px-4 text-white bg-green-800 rounded-xl"
            >
              Submit
            </button>
          </div>
        </form>
      </main>
    </div>
  );
}
